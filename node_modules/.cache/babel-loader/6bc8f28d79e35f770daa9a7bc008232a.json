{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/database\";\nimport \"firebase/auth\";\nexport const fetchMyEvents = (callback, uid) => {\n  const userEventsReference = \"users/\".concat(uid, \"/events\");\n  const myEventsRef = firebase.database().ref(userEventsReference);\n  myEventsRef.on(\"value\", snapshot => {\n    const value = snapshot.val();\n    const myEventsIds = Object.values(value);\n    callback(myEventsIds);\n  });\n  return myEventsRef;\n};\nexport const addEvents = (eventId, uid) => {\n  const userEventsReference = \"users/\".concat(uid, \"/events\");\n  const myEventsRef = firebase.database().ref(userEventsReference);\n  const eventsUpdate = eventId; // const eventsUpdate = [1, 2]\n\n  myEventsRef.once(\"value\").then(snapshot => {\n    const value = snapshot.val();\n    const myEventsIds = Object.values(value);\n\n    if (myEventsIds.includes(eventId)) {\n      return;\n    } else {\n      firebase.database().ref(userEventsReference).push(eventsUpdate);\n    }\n  }); //   const userId = firebase.auth().currentUser.uid\n};\nexport const removeEvents = (eventId, uid) => {\n  const userEventsReference = \"users/\".concat(uid, \"/events\");\n  const myEventsRef = firebase.database().ref(userEventsReference); // const eventsUpdate = eventId\n  // const eventsUpdate = [1, 2]\n\n  myEventsRef.once(\"value\").then(snapshot => {\n    const value = snapshot.val();\n    const myEventsIds = Object.values(value);\n    const index = myEventsIds.indexOf(eventId);\n    const firebaseId = Object.keys(value)[index];\n    const eventToRemoveRef = firebase.database().ref(\"users/\".concat(uid, \"/events/\").concat(firebaseId));\n\n    if (myEventsIds.length === 1) {\n      firebase.database().ref(userEventsReference).set(0);\n    }\n\n    if (myEventsIds.includes(eventId)) {\n      eventToRemoveRef.remove();\n    } else {\n      return;\n    }\n  });\n};\nexport const fetchUserName = uid => {\n  const userNameRef = \"users/\".concat(uid, \"/name\");\n  const userName = firebase.database().ref(userNameRef);\n  return userName.once(\"value\").then(snapshot => {\n    return snapshot.val();\n  });\n};","map":{"version":3,"sources":["/home/lukasz/Desktop/cos/src/services/UsersEventService.js"],"names":["firebase","fetchMyEvents","callback","uid","userEventsReference","myEventsRef","database","ref","on","snapshot","value","val","myEventsIds","Object","values","addEvents","eventId","eventsUpdate","once","then","includes","push","removeEvents","index","indexOf","firebaseId","keys","eventToRemoveRef","length","set","remove","fetchUserName","userNameRef","userName"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\"\nimport \"firebase/database\"\nimport \"firebase/auth\"\n\nexport const fetchMyEvents = (callback, uid) => {\n    const userEventsReference = `users/${uid}/events`\n    const myEventsRef = firebase.database().ref(userEventsReference)\n\n    myEventsRef.on(\"value\", snapshot => {\n        const value = snapshot.val()\n        const myEventsIds = Object.values(value)\n\n        callback(myEventsIds)\n    })\n\n    return myEventsRef\n}\n\nexport const addEvents = (eventId, uid) => {\n    const userEventsReference = `users/${uid}/events`\n    const myEventsRef = firebase.database().ref(userEventsReference)\n\n    const eventsUpdate = eventId\n    // const eventsUpdate = [1, 2]\n    myEventsRef.once(\"value\").then(snapshot => {\n        const value = snapshot.val()\n        const myEventsIds = Object.values(value)\n        if (myEventsIds.includes(eventId)) {\n            return\n        } else {\n            firebase\n                .database()\n                .ref(userEventsReference)\n                .push(eventsUpdate)\n        }\n    })\n\n    //   const userId = firebase.auth().currentUser.uid\n}\n\nexport const removeEvents = (eventId, uid) => {\n    const userEventsReference = `users/${uid}/events`\n    const myEventsRef = firebase.database().ref(userEventsReference)\n\n    // const eventsUpdate = eventId\n    // const eventsUpdate = [1, 2]\n\n    myEventsRef.once(\"value\").then(snapshot => {\n        const value = snapshot.val()\n        const myEventsIds = Object.values(value)\n        const index = myEventsIds.indexOf(eventId)\n        const firebaseId = Object.keys(value)[index]\n        const eventToRemoveRef = firebase\n            .database()\n            .ref(`users/${uid}/events/${firebaseId}`)\n        if (myEventsIds.length === 1) {\n            firebase\n                .database()\n                .ref(userEventsReference)\n                .set(0)\n        }\n        if (myEventsIds.includes(eventId)) {\n            eventToRemoveRef.remove()\n        } else {\n            return\n        }\n    })\n}\n\nexport const fetchUserName = uid => {\n    const userNameRef = `users/${uid}/name`\n    const userName = firebase.database().ref(userNameRef)\n\n    return userName.once(\"value\").then(snapshot => {\n        return snapshot.val()\n    })\n}\n"]},"metadata":{},"sourceType":"module"}